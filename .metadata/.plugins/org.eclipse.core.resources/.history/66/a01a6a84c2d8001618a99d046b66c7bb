/*
 Time Coplexity = n * log(n)
 Memory Complexity = n

Explanation
 (1) start -> N1 -> N2 -> END
    예외 사항으로 start -> N1 으로 갈때 N2를 지났나 확인해봐야한다.

 (2) start -> N2 -> N1 -> END
    예외 사항으로 start -> N2 으로 갈때 N1를 지났나 확인해봐야한다.

 (1) vs (2)
 */

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

const int INF = 1001;
int V,E , node1, node2;
vector<pair<int, int>> edge[801];
priority_queue<pair<int, int>> qu;
int check[801];
int path[801];

int dijk(int n1, int n2){
    int result;

    //start -> n1;
    qu.push(make_pair(node1, 0));
    check[node1] = 0;
    while (!qu.empty()) {
        int node = qu.top().first;
        int cost = qu.top().second;
        qu.pop();

        if (check[node] < cost)
            continue;

        path[node] = node;

        for (int i = 0 ; i < edge[node].size(); i++) {
            int next_node = edge[node][i].first;
            int next_cost = edge[node][i].second;

            if (check[next_node] > next_cost + cost) {
                qu.push(make_pair(next_node, next_cost + cost));
                check[next_node] = next_cost + cost;
            }
        }
    }

    return result;
}

int main() {
    scanf("%d %d", &V, &E);
    fill(&check[0], &check[V] + 1, INF);
    for (int i = 1 ; i <= E; i++) {
        int a,b,c;
        scanf("%d %d %d", &a, &b, &c);
        edge[a].push_back(make_pair(b, c));
        edge[b].push_back(make_pair(a, c));
    }
    scanf("%d %d", &node1, &node2);

    qu.push(make_pair(node1, 0));
    check[node1] = 0;
    while (!qu.empty()) {
        int node = qu.top().first;
        int cost = qu.top().second;
        qu.pop();

        if (check[node] < cost)
            continue;

        for (int i = 0 ; i < edge[node].size(); i++) {
            int next_node = edge[node][i].first;
            int next_cost = edge[node][i].second;

            if (check[next_node] > next_cost + cost) {
                qu.push(make_pair(next_node, next_cost + cost));
                check[next_node] = next_cost + cost;
            }
        }
    }

    int result = check[node2] >= INF ? -1 : check[node2];
    printf("%d\n", result);

    return 0;
}
