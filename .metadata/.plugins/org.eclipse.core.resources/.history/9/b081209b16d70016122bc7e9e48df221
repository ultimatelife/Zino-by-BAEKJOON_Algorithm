#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

class Info{
public:
    int node;
    int cost;

    Info(int n, int c){
        node = n;
        cost = c;
    }
};

const int INF = 1001;
int V,E , fromNode, toNode;
vector<Info> edge[801];
priority_queue<Info> qu;
int check[801];

int main() {
    scanf("%d %d", &V, &E);
    fill(&check[0], &check[V] + 1, INF);
    for (int i = 1 ; i <= E; i++) {
        int a,b,c;
        scanf("%d %d %d", &a, &b, &c);
        edge[a].push_back(Info(b, c));
        edge[b].push_back(Info(a, c));
    }
    scanf("%d %d", &fromNode, &toNode);

    qu.push(Info(fromNode, 0));
    check[fromNode] = 0;
    while (!qu.empty()) {
        Info info = qu.top();
        int node = info.node;
        int cost = info.cost;
        qu.pop();

        if (check[node] < cost)
            continue;

        for (int i = 0 ; i < edge[node].size(); i++) {
            int next_node = edge[node][i].node;
            int next_cost = edge[node][i].cost;

            if (check[next_node] > next_cost + cost) {
                qu.push(Info(next_node, next_cost + cost));
                check[next_node] = next_cost + cost;
            }
        }
    }

    int result = check[toNode] >= INF ? -1 : check[toNode];
    printf("%d\n", result);

    return 0;
}
